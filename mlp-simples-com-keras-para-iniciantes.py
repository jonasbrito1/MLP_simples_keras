{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":29926,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introdução","metadata":{}},{"cell_type":"markdown","source":"**Resumo:**\n\nO exemplo aqui desenvolvido tem como objetivo apresentar conceitos iniciais de implementação de redes neurais com python e tensorflow/keras. Esse modelo apresenta um modelo MLP básico que pode ser expandido mudando o número de neurônios e camadas. Em adaptações mais avançadas, pode-se estudar possibilidade de otimização de hyperparâmetros e outras técnincas como aumento de dados.\n\n**Não é objetivo nosso desenvolver e otimizar o modelo de classificação**. O exemplo tem objetivo meramente didático.\n\n---\n\n**Para saber mais:**\n* [Palestras e cursos do Ocean](http://www.oceanbrasil.com/)\n* François Chollet. Deep Learning with Python. Manning Publications, 2017.\n* Ian Goodfellow and Yoshua Bengio and Aaron Courville. [Deep Learning](https://www.deeplearningbook.org/). MIT Press, 2016.","metadata":{}},{"cell_type":"markdown","source":"# Bibliotecas e Dados","metadata":{}},{"cell_type":"code","source":"# Bibliotecas necessárias\n# Manipulação de dados\nimport pandas as pd\n# Redes Neurais\nfrom tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.optimizers import RMSprop\n# Plot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Avaliação\nfrom sklearn.metrics import classification_report, confusion_matrix","metadata":{"ExecuteTime":{"end_time":"2019-01-16T20:39:41.500258Z","start_time":"2019-01-16T20:39:39.261856Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:31.001812Z","iopub.execute_input":"2024-01-23T20:14:31.002709Z","iopub.status.idle":"2024-01-23T20:14:31.019429Z","shell.execute_reply.started":"2024-01-23T20:14:31.002657Z","shell.execute_reply":"2024-01-23T20:14:31.017104Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Lendo o dataset Kaggle\ntrain = pd.read_csv(\"../input/digit-recognizer/train.csv\")\n\n#Alternativa ler do próprio keras\n#(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:14:31.022799Z","iopub.execute_input":"2024-01-23T20:14:31.023343Z","iopub.status.idle":"2024-01-23T20:14:34.802777Z","shell.execute_reply.started":"2024-01-23T20:14:31.023301Z","shell.execute_reply":"2024-01-23T20:14:34.801316Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# Analisando o dataset\nprint(\"Quantidade de elementos de treino: {}\". format(len(train)))\nprint(train.head())","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:14:34.805050Z","iopub.execute_input":"2024-01-23T20:14:34.805652Z","iopub.status.idle":"2024-01-23T20:14:34.825161Z","shell.execute_reply.started":"2024-01-23T20:14:34.805592Z","shell.execute_reply":"2024-01-23T20:14:34.823304Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Quantidade de elementos de treino: 42000\n   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n0      1       0       0       0       0       0       0       0       0   \n1      0       0       0       0       0       0       0       0       0   \n2      1       0       0       0       0       0       0       0       0   \n3      4       0       0       0       0       0       0       0       0   \n4      0       0       0       0       0       0       0       0       0   \n\n   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0         0         0         0   \n3       0  ...         0         0         0         0         0         0   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 785 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Separando x_train e y_train\nY = train[\"label\"]\nX = train.drop(labels = [\"label\"],axis = 1)\nprint(X.head())\n# Em formato numpy array de imagens 28 x 28\n#x = X.values.reshape(-1,28,28,1)\n#print(x[0])","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:14:34.830939Z","iopub.execute_input":"2024-01-23T20:14:34.831460Z","iopub.status.idle":"2024-01-23T20:14:35.001517Z","shell.execute_reply.started":"2024-01-23T20:14:34.831415Z","shell.execute_reply":"2024-01-23T20:14:34.999277Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"   pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n0       0       0       0       0       0       0       0       0       0   \n1       0       0       0       0       0       0       0       0       0   \n2       0       0       0       0       0       0       0       0       0   \n3       0       0       0       0       0       0       0       0       0   \n4       0       0       0       0       0       0       0       0       0   \n\n   pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0         0         0         0   \n3       0  ...         0         0         0         0         0         0   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 784 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(Y)","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:14:35.005337Z","iopub.execute_input":"2024-01-23T20:14:35.005752Z","iopub.status.idle":"2024-01-23T20:14:35.015262Z","shell.execute_reply.started":"2024-01-23T20:14:35.005716Z","shell.execute_reply":"2024-01-23T20:14:35.013732Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"0        1\n1        0\n2        1\n3        4\n4        0\n        ..\n41995    0\n41996    1\n41997    7\n41998    6\n41999    9\nName: label, Length: 42000, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Numtendi nada!\n# Bora ver com matplotlib\nplt.imshow(X.values[100].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Label: {}'.format(Y[100]))","metadata":{"ExecuteTime":{"end_time":"2019-01-08T20:49:47.144492Z","start_time":"2019-01-08T20:49:47.016025Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:35.017535Z","iopub.execute_input":"2024-01-23T20:14:35.018330Z","iopub.status.idle":"2024-01-23T20:14:35.221013Z","shell.execute_reply.started":"2024-01-23T20:14:35.018268Z","shell.execute_reply":"2024-01-23T20:14:35.219438Z"},"trusted":true},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"Label: 9\n","output_type":"stream"}]},{"cell_type":"code","source":"# Transformando a imagem 2d em um numpy array (imagem 28*28 = 784 pixels)\nx = X.values.reshape(42000, 784)\n\n#Normalizando para valores entre 0 e 1\nx = x.astype('float32')\nx /= 255\n\nprint(x[0])","metadata":{"ExecuteTime":{"end_time":"2019-01-08T20:49:57.425537Z","start_time":"2019-01-08T20:49:57.272377Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:35.222499Z","iopub.execute_input":"2024-01-23T20:14:35.222865Z","iopub.status.idle":"2024-01-23T20:14:35.355012Z","shell.execute_reply.started":"2024-01-23T20:14:35.222828Z","shell.execute_reply":"2024-01-23T20:14:35.353804Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"[0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.7372549  1.         0.36862746 0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.7490196  0.98039216 0.99215686\n 0.3647059  0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.48235294 0.972549   0.99215686 0.654902   0.03921569 0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.3137255  0.96862745 0.99215686\n 0.8156863  0.05098039 0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.11372549 0.8117647  0.99215686 0.92156863 0.3019608  0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.21176471 0.81960785 0.99215686\n 0.99215686 0.34509805 0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.3647059  0.99607843 0.99215686 0.93333334 0.6666667  0.06666667\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.09019608 0.8235294  0.99607843\n 0.99215686 0.62352943 0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.0627451  0.81960785 0.99215686 0.99607843 0.9411765  0.31764707\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.10588235 0.99215686\n 0.99215686 0.99607843 0.05098039 0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.07843138 0.80784315 0.99607843 0.99607843 0.7764706\n 0.02745098 0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.65882355\n 0.99215686 0.99215686 0.76862746 0.02745098 0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.07843138 0.79607844 0.99215686 0.972549\n 0.29803923 0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.08627451\n 0.7372549  0.99215686 0.9607843  0.3647059  0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.40392157 0.99215686 0.99215686\n 0.7490196  0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.34901962 0.9411765  0.99215686 0.7647059  0.09803922 0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.05882353 0.8627451  0.99215686\n 0.99215686 0.3137255  0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.36862746 0.99215686 0.99215686 0.99215686 0.36862746\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.34901962\n 0.9843137  0.99215686 0.98039216 0.5137255  0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.8392157  0.85490197\n 0.37254903 0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.         0.         0.\n 0.         0.         0.         0.        ]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Vamos ajustar o formato da saida\nnum_classes = 10\n\n# Convertendo para um vetor de saida com 10 dimensoes\n# ex. 8 => [0,0,0,0,0,0,0,0,1,0]\ny = keras.utils.to_categorical(Y, num_classes)\nprint(y[0])","metadata":{"ExecuteTime":{"end_time":"2019-01-08T20:50:48.007428Z","start_time":"2019-01-08T20:50:47.986527Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:35.357184Z","iopub.execute_input":"2024-01-23T20:14:35.357531Z","iopub.status.idle":"2024-01-23T20:14:35.367698Z","shell.execute_reply.started":"2024-01-23T20:14:35.357496Z","shell.execute_reply":"2024-01-23T20:14:35.365946Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Separando uma parte para treino (90%) e outra para validação (10%)\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.1, random_state=9)\nprint('Qtde de treino: {}'.format(len(x_train)))\nprint('Qtde de validação: {}'.format(len(x_val)))","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:14:35.369519Z","iopub.execute_input":"2024-01-23T20:14:35.370041Z","iopub.status.idle":"2024-01-23T20:14:35.781228Z","shell.execute_reply.started":"2024-01-23T20:14:35.369997Z","shell.execute_reply":"2024-01-23T20:14:35.779972Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Qtde de treino: 37800\nQtde de validação: 4200\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Criando e treinando o Modelo","metadata":{}},{"cell_type":"code","source":"# Criando o modelo Sequential\n# Sequential: Modelo Keras de ir adicionando camadas (como um lego)\n# Dense: Camada onde todas as entradas estão conectadas em cada neurônio (totalmente conectada)\n# Dropout: Camada usa durante treino que descarta aleatoriamente um percentual de conexões (reduz overfitting)\n\nmodel = Sequential()\n# Camada com 30 neurônios\nmodel.add(Dense(30, activation='relu', input_shape=(784,)))\n# Dropout de 20%\nmodel.add(Dropout(0.2))\n# Camada de 20 neurônios\nmodel.add(Dense(20, activation='relu'))\n# Dropout de 20%\nmodel.add(Dropout(0.2))\n# Camda de classificação final, com 1 neurônio para cada classe de saída. Softmax divide a probabilidade de cada classe.\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.summary()","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:38:00.233865Z","start_time":"2019-01-08T21:38:00.15079Z"},"scrolled":true,"execution":{"iopub.status.busy":"2024-01-23T20:14:35.783502Z","iopub.execute_input":"2024-01-23T20:14:35.783976Z","iopub.status.idle":"2024-01-23T20:14:35.866654Z","shell.execute_reply.started":"2024-01-23T20:14:35.783897Z","shell.execute_reply":"2024-01-23T20:14:35.865655Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Model: \"sequential_1\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_3 (Dense)              (None, 30)                23550     \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 30)                0         \n_________________________________________________________________\ndense_4 (Dense)              (None, 20)                620       \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 20)                0         \n_________________________________________________________________\ndense_5 (Dense)              (None, 10)                210       \n=================================================================\nTotal params: 24,380\nTrainable params: 24,380\nNon-trainable params: 0\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"# Compila o modelo\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:33:17.184644Z","start_time":"2019-01-08T21:33:17.129141Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:35.868002Z","iopub.execute_input":"2024-01-23T20:14:35.868335Z","iopub.status.idle":"2024-01-23T20:14:35.919780Z","shell.execute_reply.started":"2024-01-23T20:14:35.868303Z","shell.execute_reply":"2024-01-23T20:14:35.918316Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# Treina com os parte dos dados\nbatch_size = 32\nepochs = 30\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_data=(x_val, y_val))","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:36:15.501168Z","start_time":"2019-01-08T21:33:19.322895Z"},"execution":{"iopub.status.busy":"2024-01-23T20:14:35.921381Z","iopub.execute_input":"2024-01-23T20:14:35.921715Z","iopub.status.idle":"2024-01-23T20:16:09.418165Z","shell.execute_reply.started":"2024-01-23T20:14:35.921681Z","shell.execute_reply":"2024-01-23T20:16:09.417208Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Train on 37800 samples, validate on 4200 samples\nEpoch 1/30\n37800/37800 [==============================] - 4s 103us/sample - loss: 0.7726 - accuracy: 0.7536 - val_loss: 0.3027 - val_accuracy: 0.9098\nEpoch 2/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.4368 - accuracy: 0.8694 - val_loss: 0.2512 - val_accuracy: 0.9290\nEpoch 3/30\n37800/37800 [==============================] - 3s 81us/sample - loss: 0.3729 - accuracy: 0.8903 - val_loss: 0.2299 - val_accuracy: 0.9357\nEpoch 4/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.3400 - accuracy: 0.9017 - val_loss: 0.2244 - val_accuracy: 0.9393\nEpoch 5/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.3314 - accuracy: 0.9081 - val_loss: 0.2027 - val_accuracy: 0.9433\nEpoch 6/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.3183 - accuracy: 0.9102 - val_loss: 0.2042 - val_accuracy: 0.9462\nEpoch 7/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.3103 - accuracy: 0.9129 - val_loss: 0.1981 - val_accuracy: 0.9479\nEpoch 8/30\n37800/37800 [==============================] - 3s 83us/sample - loss: 0.2932 - accuracy: 0.9190 - val_loss: 0.1997 - val_accuracy: 0.9481\nEpoch 9/30\n37800/37800 [==============================] - 3s 86us/sample - loss: 0.2887 - accuracy: 0.9215 - val_loss: 0.2092 - val_accuracy: 0.9476\nEpoch 10/30\n37800/37800 [==============================] - 3s 84us/sample - loss: 0.2962 - accuracy: 0.9189 - val_loss: 0.1986 - val_accuracy: 0.9517\nEpoch 11/30\n37800/37800 [==============================] - 3s 83us/sample - loss: 0.2926 - accuracy: 0.9210 - val_loss: 0.1980 - val_accuracy: 0.9524\nEpoch 12/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.2833 - accuracy: 0.9259 - val_loss: 0.1947 - val_accuracy: 0.9517\nEpoch 13/30\n37800/37800 [==============================] - 3s 79us/sample - loss: 0.2887 - accuracy: 0.9231 - val_loss: 0.2049 - val_accuracy: 0.9505\nEpoch 14/30\n37800/37800 [==============================] - 3s 81us/sample - loss: 0.2779 - accuracy: 0.9252 - val_loss: 0.2164 - val_accuracy: 0.9529\nEpoch 15/30\n37800/37800 [==============================] - 3s 78us/sample - loss: 0.2801 - accuracy: 0.9287 - val_loss: 0.2045 - val_accuracy: 0.9533\nEpoch 16/30\n37800/37800 [==============================] - 3s 78us/sample - loss: 0.2818 - accuracy: 0.9271 - val_loss: 0.2078 - val_accuracy: 0.9498\nEpoch 17/30\n37800/37800 [==============================] - 3s 79us/sample - loss: 0.2729 - accuracy: 0.9301 - val_loss: 0.2195 - val_accuracy: 0.9536\nEpoch 18/30\n37800/37800 [==============================] - 3s 81us/sample - loss: 0.2791 - accuracy: 0.9280 - val_loss: 0.2143 - val_accuracy: 0.9507\nEpoch 19/30\n37800/37800 [==============================] - 3s 80us/sample - loss: 0.2768 - accuracy: 0.9292 - val_loss: 0.2081 - val_accuracy: 0.9533\nEpoch 20/30\n37800/37800 [==============================] - 3s 80us/sample - loss: 0.2840 - accuracy: 0.9300 - val_loss: 0.2009 - val_accuracy: 0.9536\nEpoch 21/30\n37800/37800 [==============================] - 3s 80us/sample - loss: 0.2757 - accuracy: 0.9296 - val_loss: 0.2287 - val_accuracy: 0.9536\nEpoch 22/30\n37800/37800 [==============================] - 3s 79us/sample - loss: 0.2749 - accuracy: 0.9279 - val_loss: 0.2320 - val_accuracy: 0.9526\nEpoch 23/30\n37800/37800 [==============================] - 3s 79us/sample - loss: 0.2811 - accuracy: 0.9296 - val_loss: 0.2192 - val_accuracy: 0.9538\nEpoch 24/30\n37800/37800 [==============================] - 3s 81us/sample - loss: 0.2753 - accuracy: 0.9300 - val_loss: 0.2183 - val_accuracy: 0.9533\nEpoch 25/30\n37800/37800 [==============================] - 3s 84us/sample - loss: 0.2799 - accuracy: 0.9275 - val_loss: 0.2223 - val_accuracy: 0.9521\nEpoch 26/30\n37800/37800 [==============================] - 3s 84us/sample - loss: 0.2814 - accuracy: 0.9308 - val_loss: 0.2289 - val_accuracy: 0.9540\nEpoch 27/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.2817 - accuracy: 0.9297 - val_loss: 0.2154 - val_accuracy: 0.9560\nEpoch 28/30\n37800/37800 [==============================] - 3s 84us/sample - loss: 0.2781 - accuracy: 0.9298 - val_loss: 0.2377 - val_accuracy: 0.9550\nEpoch 29/30\n37800/37800 [==============================] - 3s 81us/sample - loss: 0.2843 - accuracy: 0.9291 - val_loss: 0.2525 - val_accuracy: 0.9550\nEpoch 30/30\n37800/37800 [==============================] - 3s 82us/sample - loss: 0.2936 - accuracy: 0.9299 - val_loss: 0.2374 - val_accuracy: 0.9526\n","output_type":"stream"}]},{"cell_type":"code","source":"#Vamos ver como foi o treino?\n\nfig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:36:20.243921Z","start_time":"2019-01-08T21:36:20.064201Z"},"execution":{"iopub.status.busy":"2024-01-23T20:16:09.419684Z","iopub.execute_input":"2024-01-23T20:16:09.420248Z","iopub.status.idle":"2024-01-23T20:16:09.834700Z","shell.execute_reply.started":"2024-01-23T20:16:09.420200Z","shell.execute_reply":"2024-01-23T20:16:09.833619Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1152x576 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"# Testa\nscore = model.evaluate(x_val, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:36:39.779842Z","start_time":"2019-01-08T21:36:38.946173Z"},"execution":{"iopub.status.busy":"2024-01-23T20:16:09.836343Z","iopub.execute_input":"2024-01-23T20:16:09.836700Z","iopub.status.idle":"2024-01-23T20:16:10.042473Z","shell.execute_reply.started":"2024-01-23T20:16:09.836665Z","shell.execute_reply":"2024-01-23T20:16:10.040913Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Test loss: 0.23744710483011744\nTest accuracy: 0.9526191\n","output_type":"stream"}]},{"cell_type":"code","source":"Y[10]","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:16:10.044107Z","iopub.execute_input":"2024-01-23T20:16:10.044451Z","iopub.status.idle":"2024-01-23T20:16:10.053701Z","shell.execute_reply.started":"2024-01-23T20:16:10.044419Z","shell.execute_reply":"2024-01-23T20:16:10.052241Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"8"},"metadata":{}}]},{"cell_type":"code","source":"# Testando uma entrada qualquer\nprint(y_train[10])\nprint(model.predict(x_train[10].reshape((1,784))))\nprint(model.predict_classes(x_train[10].reshape((1,784))))","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:06:04.363715Z","start_time":"2019-01-08T21:06:04.27849Z"},"execution":{"iopub.status.busy":"2024-01-23T20:16:10.055592Z","iopub.execute_input":"2024-01-23T20:16:10.055979Z","iopub.status.idle":"2024-01-23T20:16:10.172750Z","shell.execute_reply.started":"2024-01-23T20:16:10.055942Z","shell.execute_reply":"2024-01-23T20:16:10.171467Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"[0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n[[0.0000000e+00 1.1743008e-27 4.4215789e-21 1.0000000e+00 0.0000000e+00\n  1.5614509e-12 0.0000000e+00 2.8476045e-23 1.7706092e-22 1.2956086e-21]]\n[3]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Avaliando o Modelo","metadata":{}},{"cell_type":"code","source":"import itertools\n#Plot the confusion matrix. Set Normalize = True/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:16:10.174527Z","iopub.execute_input":"2024-01-23T20:16:10.174884Z","iopub.status.idle":"2024-01-23T20:16:10.192351Z","shell.execute_reply.started":"2024-01-23T20:16:10.174849Z","shell.execute_reply":"2024-01-23T20:16:10.191262Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# Vendo alguns reports\n# Usando sklearn\nimport numpy as np\n\n# Classificando toda base de teste\ny_pred = model.predict_classes(x_val)\n# voltando pro formato de classes\ny_test_c = np.argmax(y_val, axis=1)\ntarget_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n#Confution Matrix\ncm = confusion_matrix(y_test_c, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\n\nprint('Classification Report')\nprint(classification_report(y_test_c, y_pred, target_names=target_names))","metadata":{"ExecuteTime":{"end_time":"2019-01-08T21:24:57.7654Z","start_time":"2019-01-08T21:24:57.220867Z"},"execution":{"iopub.status.busy":"2024-01-23T20:16:10.193881Z","iopub.execute_input":"2024-01-23T20:16:10.194468Z","iopub.status.idle":"2024-01-23T20:16:11.137205Z","shell.execute_reply.started":"2024-01-23T20:16:10.194413Z","shell.execute_reply":"2024-01-23T20:16:11.135479Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Classification Report\n              precision    recall  f1-score   support\n\n           0       0.95      0.98      0.97       396\n           1       0.98      0.98      0.98       488\n           2       0.98      0.96      0.97       395\n           3       0.97      0.93      0.95       445\n           4       0.93      0.98      0.95       441\n           5       0.94      0.91      0.93       384\n           6       0.98      0.94      0.96       398\n           7       0.97      0.94      0.95       428\n           8       0.93      0.95      0.94       416\n           9       0.91      0.95      0.93       409\n\n    accuracy                           0.95      4200\n   macro avg       0.95      0.95      0.95      4200\nweighted avg       0.95      0.95      0.95      4200\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 720x720 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"# Gerando Saída","metadata":{}},{"cell_type":"code","source":"# Gerando saída para dataset de teste\n\n#Carrega dataset de teste\ntest = pd.read_csv(\"../input/digit-recognizer/test.csv\")\nprint(\"Qtde de testes: {}\".format(len(test)))\n# Bota no formato numpy e normaliza\nx_test = test.values.reshape(len(test),784)\nx_test = x_test.astype('float32')\nx_test /= 255\n\n# Faz classificação para dataset de teste\ny_pred = model.predict_classes(x_test)\n\n# Verficando algum exemplo\ni = 0\nplt.imshow(test.values[i].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Previsto: {}'.format(y_pred[i]))\n\n# Botando no formato de saída (competição Kaggle)\nresults = pd.Series(y_pred,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,len(y_pred)+1),name = \"ImageId\"),results],axis = 1)\nprint(submission.head(10))\n#Salvando Arquivo\nsubmission.to_csv(\"mlp_mnist_v1.csv\",index=False)","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:16:11.142222Z","iopub.execute_input":"2024-01-23T20:16:11.142626Z","iopub.status.idle":"2024-01-23T20:16:15.585861Z","shell.execute_reply.started":"2024-01-23T20:16:11.142589Z","shell.execute_reply":"2024-01-23T20:16:15.584379Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Qtde de testes: 28000\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"Previsto: 2\n   ImageId  Label\n0        1      2\n1        2      0\n2        3      9\n3        4      9\n4        5      3\n5        6      7\n6        7      0\n7        8      3\n8        9      0\n9       10      3\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Teste Adicional: Com ruído","metadata":{}},{"cell_type":"code","source":"#introduzindo ruido\nimport numpy as np\nmean = 0.\nstddev = 0.2\nnoise = np.random.normal(mean, stddev, (4200, 784))\nx_te = x_val + noise\nx_te = np.clip(x_te, 0., 1.)\n\nplt.imshow(x_te.reshape(4200, 28,28)[0], cmap=plt.cm.binary)\nplt.show()\n\n# Testa\nscore = model.evaluate(x_te, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","metadata":{"execution":{"iopub.status.busy":"2024-01-23T20:16:15.587763Z","iopub.execute_input":"2024-01-23T20:16:15.588149Z","iopub.status.idle":"2024-01-23T20:16:16.314051Z","shell.execute_reply.started":"2024-01-23T20:16:15.588111Z","shell.execute_reply":"2024-01-23T20:16:16.312651Z"},"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAWyklEQVR4nO3deXDU1ZYH8O8hyCJhC4R9iZgAIrLZ4IiI4sZiCbgwiKWCPgfL0vJZPvelnpZapdboK5cpq3gDLui4K6Ki41IoopbSyCoYEISAxCQYQBAhBM78kdaKmHtu7F9v8+73U0Ul9De3+9rk2Emf371XVBVE9K+vSbYnQESZwWInCgSLnSgQLHaiQLDYiQLRNJMP1rFjRy0qKnLmv/zyizl+165dzqxLly7JTqtRDh065MxqamrMsS1atDDz/fv3m/mBAwfMPD8/P+mxe/fuNfO2bdtGGn/kkUeaebb8/PPPZt6qVSsz9/2bN2vWzMyt7/UmTezX4ObNmzuzTZs2Yfv27dJQFqnYRWQcgEcA5AH4b1W93/r6oqIixONxZ7569Wrz8RYsWODMbrrpJnNsVNY/TllZmTm2X79+Zv7tt9+aeWVlpZmPHDnSmf3www/m2CVLlpj5OeecY+bLli0z86FDh5p5tvj+u4cPH27mvn/zXr16mbn1vW4VMwCUlJQ4s1gs5syS/jFeRPIA/BeA8QAGAJgmIgOSvT8iSq8ov7OPAPCtqm5U1RoALwCYlJppEVGqRSn27gC21Pv71sRtvyMiM0UkLiLxqqqqCA9HRFFEKfaG3gT4w7W3qjpLVWOqGissLIzwcEQURZRi3wqgZ72/9wCwLdp0iChdohT7EgAlInKUiDQDcCGA+amZFhGlWtKtN1WtFZFrAPwv6lpvc1T16yiTGThwYNL5zp07zbHt2rUz84qKCjO3+rK+1ppPcXFxpNzi65P7Wmu+dmjTpsl3b0tLSyPlEydONPMVK1Y4sx49ephjfXyttR07dpi5dd2G1VqLIlKfXVUXAHA3v4koZ/ByWaJAsNiJAsFiJwoEi50oECx2okCw2IkCkdH17Kpqrt32Le2z+PrB+/btM3Nfj//HH390Zr412506dTJz3/rlKFq2bGnma9asMXPrvxsA8vLyzHzt2rXOzNdHnzx5spn7DB482Jn5vh98eyv4nteffvrJzAcNGmTm6cBXdqJAsNiJAsFiJwoEi50oECx2okCw2IkCkdHWm4hEaq9Z+vbta+a+9pePtQOsr30l0uDOvr/p3LmzmX/88cdmfsopp5i5ZcAAe4/Qb775xsx9y3utrch8rbVnnnnGzC+66CIzt5bf+pZE19bWmvnWrVvNfNOmTWbeu3dvM7esWrXKmZlbVCf9iET0/wqLnSgQLHaiQLDYiQLBYicKBIudKBAsdqJAZLTPnk7t27ePNN53NNWoUaOcme/I5ajXFrRp0ybSeItvKWf//v3N3Le02OpXv/baa+bYSy+91MxV/3AAUaP5jvh+4YUXzLxbt25m7rt2YsuWLc7Md8R3QUGBM7OuLeArO1EgWOxEgWCxEwWCxU4UCBY7USBY7ESBYLETBeJfps8+e/ZsMz/77LPN3Nd3/eyzz5zZyJEjzbF79uwx88WLF5v50KFDzdyyYIF9yO6ECRPM/NVXXzXz119/3cy//tp9ivfy5cvNsbfffruZV1dXm7ll6tSpZu7rs3/11VdmPmzYMDMvKytzZoWFhebYmpoaZ2b12SMVu4hsArAbwEEAtaoai3J/RJQ+qXhlH6Oq21NwP0SURvydnSgQUYtdAbwnIktFZGZDXyAiM0UkLiJx3/XnRJQ+UYv9JFUdBmA8gKtFZPThX6Cqs1Q1pqox3xsPRJQ+kYpdVbclPlYCeB3AiFRMiohSL+liF5FWItL6188BnAXAXu9IRFkT5d34zgBeT+yJ3hTA/6jqu1Em49tru6ioyJlNmzbNHBuPx828Z8+eZu5b123Jz88383Hjxpn5J598YubW2mlfj/+OO+4w8/vuu8/Mffufb9682Zn59vL39cIfe+wxM7f+zS6++GJzrM+GDRvM3Ndn79WrlzNbtGiROXb06D/8tvwb64yCpItdVTcCcB+ATUQ5ha03okCw2IkCwWInCgSLnSgQLHaiQOTUElertQbYbRxfCygWsxfk+bZELi4uNvN06tixo5lbRzb72nY333yzmQ8ZMsTML7zwQjMfPny4M7OWvwL+raLbtWtn5tZx076xPlOmTIk0ftmyZc7Maq0B9nJrq9XKV3aiQLDYiQLBYicKBIudKBAsdqJAsNiJAsFiJwpETvXZDx48aOa+Xrpl4cKFZu5b4mptLTxjxgxz7Pz588184sSJZu7bztlaGuzrVVtbDwN2PxgAnnrqKTM/7bTTnNnSpUvNsQ8//LCZ79y508wt/fr1S3osAGzcuNHM+/TpY+ZRtge3rrvgkc1ExGInCgWLnSgQLHaiQLDYiQLBYicKBIudKBA51WeP4tFHHzXza6+9NtL99+3b15m999575lhfH/2HH34wc9/65h49ejizyy67zBx77733mrlvS2TfNQYW37HItbW1Zu7b/+C77777s1NqtIqKCjP39dnXrVvnzFq3bm2Otb4XW7Ro4cz4yk4UCBY7USBY7ESBYLETBYLFThQIFjtRIFjsRIHIqT57Xl5e0mN9xyJHZfU+zzjjjEj3vW/fPjO39l4HgPbt2zuzq666yhz7xBNPmPl5550XKZ85c6Yz8z1vDz74oJk//vjjZm5dv9CqVStzrK/XvXfvXjP//PPPzdzqs0+fPt0cW1NT48ys/Qu8r+wiMkdEKkVkdb3bCkTkfRFZn/jo/m4jopzQmB/jnwIw7rDbbgHwoaqWAPgw8XciymHeYlfVRQCqD7t5EoCnE58/DWByiudFRCmW7Bt0nVW1HAASHzu5vlBEZopIXETiVVVVST4cEUWV9nfjVXWWqsZUNVZYWJjuhyMih2SLvUJEugJA4mNl6qZEROmQbLHPB/Brf2A6gDdSMx0iShfx7SsuIs8DOBVARwAVAP4OYB6AlwD0AlAGYIqqHv4m3h/EYjGNx+POfNeuXeb4tm3bOjPr7HbAv+e87/0E61eQKPMGgPLycjPv2rWrmW/ZssWZ+fbD79+/v5nv2LHDzCsr0/dD3a233mrmV155pZlb/+a+PrjvV87i4mIzTydrv/wxY8Zg2bJl0lDmvahGVac5otMbNzUiygW8XJYoECx2okCw2IkCwWInCgSLnSgQGV3iun//fmzYsMGZV1fb3Ttrqec777xjjh0xYoSZ+44utloxvm2Fre19AX9rzcdqr1nHOQPAI488Yubjxh2+Bur3fHO32oo33HCDOXbSpElmbm2hDdhHQvuOTPb9m6WTrx1u1Ym1/TZf2YkCwWInCgSLnSgQLHaiQLDYiQLBYicKBIudKBDeJa6pNGzYMP3000+decuWLdP22FGPdH722Wed2ZQpU8yxzZs3N3MfX6+8WbNmzqxbt26RHnvs2LFm7juu2uLbIvvLL79M+r4B4NChQ85szZo15tiBAwdGeuzS0lIz/+WXX5xZhw4dzLHWdRWxWAzxeLzBJa58ZScKBIudKBAsdqJAsNiJAsFiJwoEi50oECx2okBkdD17kyZNzF76999/b44vKytzZieeeKI5NhaL2ZPzsNZ1b9u2zRzr63X7+vBz58418xtvvNGZ+a6j+O6778z8gw8+MHOrxw/Yxwt36dLFHBtVkybu17KofXSffv36mbm1Bbf1nAHARx995Mx2797tzPjKThQIFjtRIFjsRIFgsRMFgsVOFAgWO1EgWOxEgchon92ne/fuZv7NN98kfd8jR440c9/RxNb+50uWLDHHXn755Wbuc+edd5q51Uu/++67zbGfffaZmffq1StSvmjRImd29NFHm2M//vhjMz/llFPMPArf90P79u3N3DpWGQAWLlzozKZOnWqOtfbLb926tTPzvrKLyBwRqRSR1fVuu0tEvheR5Yk/E3z3Q0TZ1Zgf458C0NDlY/9Q1SGJPwtSOy0iSjVvsavqIgD2uUxElPOivEF3jYisTPyY7/wFRkRmikhcROJVVVURHo6Ioki22J8AcDSAIQDKATzk+kJVnaWqMVWNWYcjElF6JVXsqlqhqgdV9RCAfwKwj0gloqxLqthFpP45vecCWO36WiLKDd4+u4g8D+BUAB1FZCuAvwM4VUSGAFAAmwBcmYrJ+NZWn3766c5s/fr15tiSkhIz9/VNd+3a5cxOPvlkc2xU1tpnALj11ludma+P7rtv37n3559/vplbRBrc3vw3rVq1Svq+fQ4cOGDmvu+Ht956y8x9+yscd9xxzixd1xd4i11VpzVw8+ykHo2IsoaXyxIFgsVOFAgWO1EgWOxEgWCxEwUio0c2Dxo0SN9++21nbh1F62MdzwvYR+QC6W3z+FRX20sPfEcb79+/35n52luvvPKKmfuWsG7YsMHM77jjjqTH+o6qzsvLM3PLihUrzLxPnz5mvmXLFjP3Pe/HHHOMmSeLRzYTEYudKBQsdqJAsNiJAsFiJwoEi50oECx2okBkdCvppk2bepcOJss6nhfwL5/19T03b97szNq1a2eOLSgoMPMbbrjBzI8//ngzf/nll53Z+PHjzbEnnHCCmfuUlpaaubVcMz8/3xzr66P7euXW8t3BgwebY33XXaxZs8bMre2eAXsr6TFjxphjt2/f7sxqa2udGV/ZiQLBYicKBIudKBAsdqJAsNiJAsFiJwoEi50oEBnts+/cuRPz5s1z5hdffHHaHtvX6/b1dK0+u2/t8wMPPGDmTz75pJmPHTvWzGfPdm/2G/W46H379pm5rydsuf7665MeC/ivjbB66TU1NeZY3/HgF1xwgZn71uIXFRU5M+t7DQB69+7tzJo2dZc0X9mJAsFiJwoEi50oECx2okCw2IkCwWInCgSLnSgQGe2zFxQUmL30lStXmuOt3HdErrUGGPCvhy8uLjZzi2/dtY+vJ2z10l988UVz7NSpU8386quvNvMzzjjDzK098X1rwj/44AMzHzJkiJlb1whY68kB4KijjjJzH6uP7tO5c+dIj+3ifWUXkZ4islBE1orI1yLy18TtBSLyvoisT3xMz64URJQSjfkxvhbA31T1GAD/BuBqERkA4BYAH6pqCYAPE38nohzlLXZVLVfVrxKf7wawFkB3AJMAPJ34sqcBTE7XJIkouj/1Bp2IFAEYCuALAJ1VtRyo+x8CgE6OMTNFJC4i8aqqqmizJaKkNbrYRSQfwKsArlPVnxo7TlVnqWpMVWOFhYXJzJGIUqBRxS4iR6Cu0J9T1dcSN1eISNdE3hWAeytPIso6b+tN6s6enQ1grao+XC+aD2A6gPsTH9+IOplBgwZFyi2tW7c2806dGvwt5DdWG+eaa64xx/raX76tqO+++24zt7Zz9rXWvvjiCzOfM2eOmftaVNYW3rfcYr+n62vrvfvuu2ZuHdN9ySWXmGNXr15t5j7xeNzMY7GYM2vRooU5dunSpc5s7969zqwxffaTAFwCYJWILE/cdhvqivwlEfkLgDIAUxpxX0SUJd5iV9XFAFwny5+e2ukQUbrwclmiQLDYiQLBYicKBIudKBAsdqJAZHSJq4/vWGWrF+47Yvfnn39Oak6/spaZXnrppebYbdu2mbl1rDEAPPbYY2Y+evRoZ3bFFVeYYysqKszcx/dvdu655zqzKVPsbq2qmrmvx9+vXz8zt1hHHzeG1Uf38fXomzVr5szqLotpGF/ZiQLBYicKBIudKBAsdqJAsNiJAsFiJwoEi50oEBnts+/atQtvvvmmM/dtv1tZ6d4fo1u3buZYX082yhG7I0aMMMf6jvf95JNPzNzXd3355ZedWd++fc2x69evN3Ofe+65x8xnzJiR9H2vW7fOzH199MWLFzuzUaNGmWN921Tv2bPHzA8dOmTmu3fvdma+Hr21Tr958+bOjK/sRIFgsRMFgsVOFAgWO1EgWOxEgWCxEwWCxU4UiIz22UXE7AMed9xx5vhVq1Y5M+t+G8PX41++fLkzO3jwoDl2zJgxZv7cc8+Z+XXXXWfmFl+vevr06Wb+0EMPJf3YANChQwdnVlZWZo71XX/gOwvA6qX7joseMGCAmefn55u5T5s2bZyZbx1/y5YtnZl19Dhf2YkCwWInCgSLnSgQLHaiQLDYiQLBYicKBIudKBCNOZ+9J4BnAHQBcAjALFV9RETuAvAfAKoSX3qbqi6w7qtNmzY466yznHl1dbU5F18fPoq1a9eaubW+2XdO+PHHH2/mS5YsMfOXXnrJzEtKSpyZtd894O9Vp1Pbtm3N3Lfnve/6hqqqKmcWtc/us3nzZjO31qT379/fHGt9v1jnIzTmoppaAH9T1a9EpDWApSLyfiL7h6r+ZyPug4iyrDHns5cDKE98vltE1gLonu6JEVFq/anf2UWkCMBQAF8kbrpGRFaKyBwRae8YM1NE4iISt36sIqL0anSxi0g+gFcBXKeqPwF4AsDRAIag7pW/wYuoVXWWqsZUNVZYWJiCKRNRMhpV7CJyBOoK/TlVfQ0AVLVCVQ+q6iEA/wRg77pIRFnlLXapOxZyNoC1qvpwvdu71vuycwGsTv30iChVGvNu/EkALgGwSkR+Xed5G4BpIjIEgALYBODKqJNZuXKlmR977LHOzHdks2+55NixY83cOnZ53Lhx5lgf3zbXAwcOTPq+fUt/fVto+8Z37drVzEtLS52Z7xjtvLw8Mx88eLCZW782+rb33rhxo5n73n864YQTzHzBAneXukuXLubY4cOHOzOrDhrzbvxiAA0d+mz21Ikot/AKOqJAsNiJAsFiJwoEi50oECx2okCw2IkCkdGtpPfu3YulS5c6c1+v3Oqb+nr0vj76/v37zby8vNyZ+Y6LnjdvnplPnjzZzKPYt2+fmfu20I7Kd6yyZceOHSmcye/NnTvXzE8++WQzLy4ujvT4Z555pjM74ogjIt23C1/ZiQLBYicKBIudKBAsdqJAsNiJAsFiJwoEi50oEOI7HjalDyZSBaD+HrsdAWzP2AT+nFydW67OC+DckpXKufVW1QYvSMlosf/hwUXiqhrL2gQMuTq3XJ0XwLklK1Nz44/xRIFgsRMFItvFPivLj2/J1bnl6rwAzi1ZGZlbVn9nJ6LMyfYrOxFlCIudKBBZKXYRGScipSLyrYjcko05uIjIJhFZJSLLRSSe5bnMEZFKEVld77YCEXlfRNYnPjZ4xl6W5naXiHyfeO6Wi8iELM2tp4gsFJG1IvK1iPw1cXtWnztjXhl53jL+O7uI5AFYB+BMAFsBLAEwTVXtA7MzREQ2AYipatYvwBCR0QD2AHhGVQcmbnsQQLWq3p/4H2V7Vb05R+Z2F4A92T7GO3FaUdf6x4wDmAxgBrL43Bnz+ndk4HnLxiv7CADfqupGVa0B8AKASVmYR85T1UUAqg+7eRKApxOfP426b5aMc8wtJ6hquap+lfh8N4BfjxnP6nNnzCsjslHs3QFsqff3rcit894VwHsislREZmZ7Mg3orKrlQN03D4BOWZ7P4bzHeGfSYceM58xzl8zx51Flo9gbOkoql/p/J6nqMADjAVyd+HGVGqdRx3hnSgPHjOeEZI8/jyobxb4VQM96f+8BwH1qYoap6rbEx0oAryP3jqKu+PUE3cTHyizP5ze5dIx3Q8eMIweeu2wef56NYl8CoEREjhKRZgAuBDA/C/P4AxFplXjjBCLSCsBZyL2jqOcDmJ74fDqAN7I4l9/JlWO8XceMI8vPXdaPP1fVjP8BMAF178hvAHB7NubgmFcfACsSf77O9twAPI+6H+sOoO4nor8A6ADgQwDrEx8LcmhucwGsArASdYXVNUtzG4W6Xw1XAlie+DMh28+dMa+MPG+8XJYoELyCjigQLHaiQLDYiQLBYicKBIudKBAsdqJAsNiJAvF/ra9IFOxadtYAAAAASUVORK5CYII=\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"Test loss: 4.072248474302746\nTest accuracy: 0.6609524\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Com ruído, percebemos que a acurácia dos exemplos de validação caiu muito. \nUma MLP aprende a partir de pixels individuais.\nUm modelo Convolucional (CNN) captura melhor regiões, ou padrões espaciais de pixels.\nVeja o exemplo com CNN.","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}